// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Zora = require("zora");
var Assert = require("assert");
var Events = require("events");
var EventEmitterTestLib$NodeJs = require("../module/EventEmitterTestLib.bs.js");

Zora.test("EventEmitter", (function (t) {
        t.notEqual(new Events.EventEmitter(), undefined, "'Emitter.make' should create a new emitter instance that is defined");
        t.equal(new Events.EventEmitter().addListener(EventEmitterTestLib$NodeJs.Emitter1.Events.text, (function (param) {
                      
                    })).listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text).length, 1, "'Emitter.addListener' should add a new event listener");
        t.equal(new Events.EventEmitter().on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, (function (param) {
                      
                    })).listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text).length, 1, "'Emitter.on' should add a new event listener");
        t.equal(new Events.EventEmitter().on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, (function (param) {
                      
                    })).listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text).length, 1, "'Emitter.on' should add a new event listener");
        t.test("'Emitter.removeListener' should remove the event listener", (function (t) {
                var eventListener = function (param) {
                  
                };
                var __x = new Events.EventEmitter();
                var __x$1 = __x.on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                var __x$2 = __x$1.removeListener(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                var listeners = __x$2.listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text);
                t.equal(listeners.length, 0, "");
              }));
        t.test("'Emitter.off' should remove the event listener", (function (t) {
                var eventListener = function (param) {
                  
                };
                var __x = new Events.EventEmitter();
                var __x$1 = __x.on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                var __x$2 = __x$1.off(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                var listeners = __x$2.listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text);
                t.equal(listeners.length, 0, "");
              }));
        t.test("'Emitter.emit' should execute each listener for the correct event", (function (t) {
                var ref1 = {
                  contents: 0
                };
                var ref2 = {
                  contents: 0
                };
                var listener1 = function (param) {
                  ref1.contents = 1;
                };
                var listener2 = function (param) {
                  ref2.contents = 2;
                };
                var __x = new Events.EventEmitter();
                var __x$1 = __x.on(EventEmitterTestLib$NodeJs.Emitter1.Events.integer, listener1);
                var emitter = __x$1.on(EventEmitterTestLib$NodeJs.Emitter1.Events.integer, listener2);
                emitter.emit(EventEmitterTestLib$NodeJs.Emitter1.Events.integer, 1);
                emitter.emit(EventEmitterTestLib$NodeJs.Emitter1.Events.integer, 2);
                t.equal(ref1.contents, 1, "");
                t.equal(ref2.contents, 2, "");
              }));
        t.test("'Emitter.removeAllListeners' should remove all event listeners", (function (t) {
                var eventListener = function (param) {
                  
                };
                var __x = new Events.EventEmitter();
                var __x$1 = __x.on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                var __x$2 = __x$1.on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                var emitter = __x$2.on(EventEmitterTestLib$NodeJs.Emitter1.Events.text, eventListener);
                Assert.strictEqual(emitter.listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text).length, 3);
                emitter.removeAllListeners();
                t.equal(emitter.listeners(EventEmitterTestLib$NodeJs.Emitter1.Events.text).length, 0, "");
              }));
      }));

/*  Not a pure module */
