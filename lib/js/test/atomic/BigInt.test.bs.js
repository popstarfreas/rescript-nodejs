// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Zora = require("zora");
var Random = require("rescript/lib/js/random.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var BigInt$NodeJs = require("../../src/BigInt.bs.js");

Zora.test("BigInt", (function (t) {
        Random.init(84611);
        t.test("'BigInt.fromInt' and 'BigInt.toInt' are associative operations for all 32-bit integers", (function (t) {
                var arrA = Belt_Array.makeByU(1000, (function (param) {
                        return Random.$$int(1000000);
                      }));
                var arrB = Belt_Array.map(arrA, (function (prim) {
                        return BigInt(prim);
                      }));
                var arrC = Belt_Array.map(arrB, (function (prim) {
                        return Number(prim);
                      }));
                t.equal(arrA, arrC, "");
              }));
        t.test("BigInt.add", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a + b | 0;
                t.equal(BigInt(a) + BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(+)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a + b | 0;
                t.equal(BigInt(a) + BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.subtract", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a - b | 0;
                t.equal(BigInt(a) - BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(-)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a - b | 0;
                t.equal(BigInt(a) - BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.multiply", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = Math.imul(a, b);
                t.equal(BigInt(a) * BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(*)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = Math.imul(a, b);
                t.equal(BigInt(a) * BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.divide", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = Caml_int32.div(a, b);
                t.equal(BigInt(a) / BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(/)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = Caml_int32.div(a, b);
                t.equal(BigInt(a) / BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.negate", (function (t) {
                var a = Random.$$int(400);
                var b = -a | 0;
                t.equal(-BigInt(a), BigInt(b), "");
              }));
        t.test("BigInt.(~-)", (function (t) {
                var a = Random.$$int(400);
                var b = -a | 0;
                t.equal(-BigInt(a), BigInt(b), "");
              }));
        t.test("BigInt.modulo", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = Caml_int32.mod_(a, b);
                t.equal(BigInt$NodeJs.modulo(BigInt(a), BigInt(b)), BigInt(c), "");
              }));
        t.test("BigInt.(mod)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = Caml_int32.mod_(a, b);
                t.equal(BigInt$NodeJs.mod(BigInt(a), BigInt(b)), BigInt(c), "");
              }));
        t.test("BigInt.power", (function (t) {
                var a = Random.$$int(6);
                var b = Random.$$int(8);
                var c = Math.pow(a, b);
                t.equal(BigInt$NodeJs.power(BigInt(a), BigInt(b)), BigInt(c), "");
              }));
        t.test("BigInt.(**)", (function (t) {
                var a = Random.$$int(6);
                var b = Random.$$int(8);
                var c = Math.pow(a, b);
                t.equal(BigInt$NodeJs.$star$star(BigInt(a), BigInt(b)), BigInt(c), "");
              }));
        t.test("BigInt.logicalAnd", (function (t) {
                var a = Random.$$int(256);
                var b = Random.$$int(256);
                var c = a & b;
                t.equal(BigInt(a) & BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(land)", (function (t) {
                var a = Random.$$int(256);
                var b = Random.$$int(256);
                var c = a & b;
                t.equal(BigInt(a) & BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.logicalOr", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a | b;
                t.equal(BigInt(a) | BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(lor)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a | b;
                t.equal(BigInt(a) | BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.logicalXor", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a ^ b;
                t.equal(BigInt(a) ^ BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.(lxor)", (function (t) {
                var a = Random.$$int(400);
                var b = Random.$$int(400);
                var c = a ^ b;
                t.equal(BigInt(a) ^ BigInt(b), BigInt(c), "");
              }));
        t.test("BigInt.logicalNot", (function (t) {
                var a = Random.$$int(400);
                var b = Pervasives.lnot(a);
                t.equal(BigInt$NodeJs.logicalNot(BigInt(a)), BigInt(b), "");
              }));
        t.test("BigInt.(lnot)", (function (t) {
                var a = Random.$$int(400);
                var b = Pervasives.lnot(a);
                t.equal(BigInt$NodeJs.lnot(BigInt(a)), BigInt(b), "");
              }));
        t.test("BigInt.logicalShiftLeft", (function (t) {
                var c = 3328;
                t.equal((BigInt(26) << BigInt(7)), BigInt(c), "");
              }));
        t.test("BigInt.(lsl)", (function (t) {
                var c = 3328;
                t.equal((BigInt(26) << BigInt(7)), BigInt(c), "");
              }));
        t.test("BigInt.arithmeticShiftRight", (function (t) {
                var c = 2;
                t.equal((BigInt(32) >> BigInt(4)), BigInt(c), "");
              }));
        t.test("BigInt.(asr)", (function (t) {
                var c = 2;
                t.equal((BigInt(32) >> BigInt(4)), BigInt(c), "");
              }));
      }));

/*  Not a pure module */
