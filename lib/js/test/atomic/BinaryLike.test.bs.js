// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Zora = require("zora");
var BinaryLike$NodeJs = require("../../src/BinaryLike.bs.js");

Zora.test("BinaryLike", (function (t) {
        var binaryLikeString = BinaryLike$NodeJs.string("test1234");
        var buffer_ = Buffer.from([
              1,
              2,
              3,
              4
            ]);
        var binaryLikeBuffer = BinaryLike$NodeJs.buffer(buffer_);
        var uInt8Array = new Uint8Array([
              1,
              2,
              3,
              4
            ]);
        var binaryLikeUint8Array = BinaryLike$NodeJs.uInt8Array(uInt8Array);
        var int8Array = new Int8Array([
              1,
              2,
              3,
              4
            ]);
        var binaryLikeInt8Array = BinaryLike$NodeJs.int8Array(int8Array);
        var uInt8ClampedArray = new Uint8ClampedArray([
              1,
              2,
              3,
              4
            ]);
        var binaryLikeUint8ClampedArray = BinaryLike$NodeJs.uInt8ClampedArray(uInt8ClampedArray);
        var uInt16Array = new Uint16Array([
              1,
              2,
              3,
              4
            ]);
        var binaryLikeUint16Array = BinaryLike$NodeJs.uInt16Array(uInt16Array);
        var int16Array = new Int16Array([
              1,
              2,
              3,
              4
            ]);
        var binaryLikeInt16Array = BinaryLike$NodeJs.int16Array(int16Array);
        t.test("BinaryLike.classify(string) should return a 'String' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeString);
                var tmp;
                tmp = match.TAG === /* String */0 ? true : false;
                t.ok(tmp, "");
              }));
        t.test("BinaryLike.classify(buffer) should return a 'Buffer' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeBuffer);
                var tmp;
                tmp = match.TAG === /* Buffer */1 ? true : false;
                t.ok(tmp, "");
              }));
        t.test("BinaryLike.classify(uInt8Array) should return a 'Uint8Array' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeUint8Array);
                var tmp;
                tmp = match.TAG === /* Uint8Array */2 ? true : false;
                t.ok(tmp, "");
              }));
        t.test("BinaryLike.classify(int8Array) should return a 'Int8Array' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeInt8Array);
                var tmp;
                tmp = match.TAG === /* Int8Array */3 ? true : false;
                t.ok(tmp, "");
              }));
        t.test("BinaryLike.classify(uInt8ClampedArray) should return a 'Uint8ClampedArray' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeUint8ClampedArray);
                var tmp;
                tmp = match.TAG === /* Uint8ClampedArray */4 ? true : false;
                t.ok(tmp, "");
              }));
        t.test("BinaryLike.classify(uInt16Array) should return a 'Uint16Array' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeUint16Array);
                var tmp;
                tmp = match.TAG === /* Uint16Array */5 ? true : false;
                t.ok(tmp, "");
              }));
        t.test("BinaryLike.classify(int16Array) should return a 'Int16Array' variant", (function (t) {
                var match = BinaryLike$NodeJs.classify(binaryLikeInt16Array);
                var tmp;
                tmp = match.TAG === /* Int16Array */6 ? true : false;
                t.ok(tmp, "");
              }));
      }));

/*  Not a pure module */
