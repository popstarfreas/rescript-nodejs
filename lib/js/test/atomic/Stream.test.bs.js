// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Zora = require("zora");
var Nodestream = require("node:stream");
var StreamTestLib$NodeJs = require("../module/StreamTestLib.bs.js");

Zora.test("Stream.Readable", (function (t) {
        t.test("'Stream.Readable.make' should return a defined value", (function (t) {
                var readable = StreamTestLib$NodeJs.makeReadableEmpty();
                t.notEqual(readable, undefined, "");
              }));
        t.test("'Stream.Readable.make' should return an instance of 'Readable'", (function (t) {
                var readable = StreamTestLib$NodeJs.makeReadableEmpty();
                t.equal(readable.constructor.name, "Readable", "");
              }));
        t.test("'Stream.Readable.pipe' returns a writable stream", (function (t) {
                var readable = StreamTestLib$NodeJs.makeReadableEmpty();
                var writable = StreamTestLib$NodeJs.makeWritableEmpty();
                t.equal(readable.pipe(writable), writable, "");
              }));
        t.test("'Stream.Readable.destroyWithError' should emit 'error' event", (function (t) {
                var dummyError = new Error("Expected error: Stream destroyed");
                return new Promise((function (resolve, param) {
                              var stream = StreamTestLib$NodeJs.makeReadableEmpty().on("error", (function (err) {
                                      t.equal(err, dummyError, "");
                                      resolve();
                                    }));
                              setTimeout((function () {
                                      stream.destroy(dummyError);
                                    }), 10);
                            }));
              }));
        t.test("'Stream.Readable.destroy' should return the exact same instance of 'Readable'", (function (t) {
                var readable = StreamTestLib$NodeJs.makeReadableEmpty();
                t.equal(readable.destroy(), readable, "");
              }));
      }));

Zora.test("Stream.Writable", (function (t) {
        t.test("'Stream.Writable.make' should return a defined value", (function (t) {
                var writable = StreamTestLib$NodeJs.makeWritableEmpty();
                t.notEqual(writable, undefined, "");
              }));
        t.test("'Stream.Writable.make' should return an instance of 'Writable'", (function (t) {
                var writable = StreamTestLib$NodeJs.makeWritableEmpty();
                t.equal(writable.constructor.name, "Writable", "");
              }));
        t.test("Stream.Writable.makeObjMode should have a 'write' function with the correct function signature", (function (t) {
                var args = {
                  contents: undefined
                };
                var options = {
                  objectMode: true,
                  write: (function (data, encoding, callback) {
                      var wstream = this ;
                      args.contents = [
                        wstream,
                        data,
                        encoding,
                        callback
                      ];
                      callback(undefined);
                    })
                };
                return new Promise((function (resolve, param) {
                              var writeStream = new Nodestream.Writable(options);
                              writeStream.write(42, (function (param) {
                                      var match = args.contents;
                                      var actual = match !== undefined ? [
                                          match[0].constructor.name,
                                          typeof match[1],
                                          match[2],
                                          typeof match[3]
                                        ] : undefined;
                                      t.equal(actual, [
                                            "Writable",
                                            "number",
                                            null,
                                            "function"
                                          ], "");
                                      resolve();
                                    }));
                            }));
              }));
      }));

/*  Not a pure module */
